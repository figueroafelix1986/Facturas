// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using factura.Commons;

namespace factura.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240219033630_AddBaseDeDatos")]
    partial class AddBaseDeDatos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("factura.Models.Contratos.ContratoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumContrato")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("factura.Models.Cotizacion.CotizacioListModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoCotizId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroCotizacion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<string>("observa")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoCotizId");

                    b.ToTable("Cotizacion");
                });

            modelBuilder.Entity("factura.Models.Cotizacion.CotizacionDetalleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("TEXT");

                    b.Property<int>("CotizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServicioTCPId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CotizacionId");

                    b.HasIndex("ServicioTCPId");

                    b.ToTable("CotizacionServ");
                });

            modelBuilder.Entity("factura.Models.Nomencladores.CuentasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Banco")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumeroCuenta")
                        .HasColumnType("TEXT");

                    b.Property<int>("TcpId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("MonedId");

                    b.HasIndex("TcpId");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("factura.Models.Nomencladores.EmpresaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoReup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Representante")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("factura.Models.Nomencladores.EstadosCotizacionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EstadoCotizacion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EstadoCotiz");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EstadoCotizacion = "Sin Facturar"
                        },
                        new
                        {
                            Id = 2,
                            EstadoCotizacion = "Facturada"
                        },
                        new
                        {
                            Id = 3,
                            EstadoCotizacion = "Cancelar"
                        });
                });

            modelBuilder.Entity("factura.Models.Nomencladores.MonedaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cambio")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoMoneda")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Moneda");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cambio = 1m,
                            TipoMoneda = "CUP"
                        },
                        new
                        {
                            Id = 2,
                            Cambio = 130m,
                            TipoMoneda = "MLC"
                        });
                });

            modelBuilder.Entity("factura.Models.Nomencladores.ServiciosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServicioTCP");
                });

            modelBuilder.Entity("factura.Models.Nomencladores.TcpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellidos")
                        .HasColumnType("TEXT");

                    b.Property<string>("Carnet")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codigo")
                        .HasColumnType("TEXT");

                    b.Property<string>("NIT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumLicencia")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tcps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "Cruz Rodríguez",
                            Carnet = "62121200167",
                            Codigo = "631",
                            NIT = "8100-7612-6212-1032. Playa",
                            Nombre = "Fidel",
                            NumLicencia = "C364483"
                        });
                });

            modelBuilder.Entity("factura.Models.Contratos.ContratoModel", b =>
                {
                    b.HasOne("factura.Models.Nomencladores.EmpresaModel", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("factura.Models.Cotizacion.CotizacioListModel", b =>
                {
                    b.HasOne("factura.Models.Nomencladores.EmpresaModel", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("factura.Models.Nomencladores.EstadosCotizacionModel", "EstadoCotiz")
                        .WithMany()
                        .HasForeignKey("EstadoCotizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("factura.Models.Cotizacion.CotizacionDetalleModel", b =>
                {
                    b.HasOne("factura.Models.Cotizacion.CotizacioListModel", "Cotizacion")
                        .WithMany()
                        .HasForeignKey("CotizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("factura.Models.Nomencladores.ServiciosModel", "ServicioTCP")
                        .WithMany()
                        .HasForeignKey("ServicioTCPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("factura.Models.Nomencladores.CuentasModel", b =>
                {
                    b.HasOne("factura.Models.Nomencladores.EmpresaModel", "EmpresaCuenta")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("factura.Models.Nomencladores.MonedaModel", "MonedaModel")
                        .WithMany()
                        .HasForeignKey("MonedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("factura.Models.Nomencladores.TcpModel", "TcpCuenta")
                        .WithMany()
                        .HasForeignKey("TcpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
